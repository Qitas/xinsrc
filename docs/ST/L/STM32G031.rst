
.. _stm32g031:

STM32G031
===============

* 关键词：``Cortex-M0`` ``64MHz`` ``LPUART`` ``LPTIM``
* 资源库：`GitHub <https://github.com/SoCXin/STM32G031>`_ , `Gitee <https://gitee.com/socxin/STM32G031>`_

.. contents::
    :local:


Xin简介
-----------

.. image:: ./images/STM32G031.jpg
    :target: https://www.st.com/zh/microcontrollers-microprocessors/stm32g0x1.html

规格参数
~~~~~~~~~~~


基本参数
^^^^^^^^^^^

* 发布时间：
* 制程工艺：90 nm
* 工作温度：-40°C to +125°C
* 处理性能：59 :ref:`DMIPS`, 142 :ref:`CoreMark`
* RAM容量：8 KB
* Flash容量：32/64 KB
* 封装规格：LQFP48/LQFP32/TSSOP20/ :ref:`stm32_so8`

.. image:: ./images/STM32G031p.png
    :target: https://www.st.com/zh/microcontrollers-microprocessors/stm32g0x1.html

特征参数
^^^^^^^^^^^

* 64 MHz :ref:`cortex_m0`
* :ref:`stm32_lpuart`
* 2x :ref:`stm32_lptim`
* MOTOR C timer
* 12-bit SAR ADC (2.5 MSPS)
* 5ch x DMA
* 1KB OTP
* I2S
* RTC

电源参数
^^^^^^^^^^^

* 供电电压: 1.7 to 3.6 V
* 运行功耗: 100μA/MHz


芯片架构
~~~~~~~~~~~

.. image:: ./images/STM32G031s.png
    :target: https://www.st.com/zh/microcontrollers-microprocessors/stm32g0x1.html

时钟相关
^^^^^^^^^^^

* HSI RC 16 MHz(±1%)
* LSI RC 32 kHz(±5%)

.. _stm32_lpuart:

LPUART
^^^^^^^^^^^

.. _stm32_lptim:

LPTIM
^^^^^^^^^^^


Xin选择
-----------

.. contents::
    :local:

品牌对比
~~~~~~~~~


系列对比
~~~~~~~~~

超值系列
^^^^^^^^^^

.. image:: ./images/STM32G0.png
    :target: https://www.st.com/zh/microcontrollers-microprocessors/stm32g0x1.html

.. warning::
    对比  :ref:`stm32g030` 多了 :ref:`stm32_lpuart` 和  :ref:`stm32_lptim` ，内部高速时钟精度可达1%，同时拥有更多可选的型号

型号对比
~~~~~~~~~

.. image:: ./images/STM32G031.png
    :target: https://www.st.com/zh/microcontrollers-microprocessors/stm32g0x1.html


Xin实践
--------------

STM32G031系列拥有非常丰富的产品规格，目前公开售卖的开发板中最常用的型号为 STM32G031J6 和 STM32G031K8

.. image:: ./images/B_STM32G031.jpg
    :target: https://item.taobao.com/item.htm?spm=a230r.1.14.24.5fcf7cd1dZFnby&id=636761611307&ns=1&abbucket=19#detail

开发工具
~~~~~~~~~

使用STM32芯片最直接方式是通过 `stm32cube <https://www.st.com/zh/ecosystems/stm32cube.html>`_ 工具构建基本运行体，不用开发者自己去研究寄存器初始化相应外设（但请注意使能）。

源圈OS-Q验证后整合的开发框架 `P215 <https://github.com/OS-Q/P215>`_ ，集成了更多可用资源，兼容stm32cube及stm32cubeIDE，作为一个开源编译体系，便于多系统下开发和云端部署。


示例代码
~~~~~~~~~

1. 基于STM32CubeMX生成HAL库工程

.. code-block:: bash

    uint8_t RxData;     //中断接收串口1数据
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
        if(&huart1 == huart) {
            HAL_UART_Receive_IT(huart, &RxData, 1);
        }
    }

    void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
        if(htim==(&htim17)) //定时器中断函数
        {
            g_run_tick++;
        }
    }

    int main(void)
    {
        /* USER CODE BEGIN 2 */
        HAL_UART_Receive_IT(&huart1, &RxData, 1);   //中断接收使能
        HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);   //PWM输出使能
        HAL_TIM_Base_Start_IT(&htim17);             //定时器使能
        /* USER CODE END 2 */
        while (1)
        {
            /* USER CODE BEGIN 3 */
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
            HAL_Delay(500);
        }
        /* USER CODE END 3 */
    }


2. 基于STM32CubeMX生成LL库工程

.. code-block:: bash

    int main(void)
    {
        LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
        LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
        LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
        LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
        LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
        GPIO_InitStruct.Pin = LED_Pin;
        GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
        GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
        GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
        GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
        LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
        while (1)
        {
            LL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
            LL_mDelay(400);
        }
    }


3. 基于ARM CMSIS库

.. code-block:: bash

    int main(void)
    {
        ENABLE_GPIO_CLOCK;              // enable the clock to GPIO
        LEDPORT->_MODER |= GPIOMODER;   // set pins to be general purpose output
        for (;;) {
        ms_delay(500);
        LEDPORT->ODR ^= (1<<LED1);      // toggle diodes
        }
        return 0;
    }



开源项目
~~~~~~~~~

如果你要探索一些开源项目，可能时常遇到基于 `PlatformIO <https://platformio.org/platforms/ststm32>`_ 构建的工程，通过跨平台编译，直接在编辑器中集成，可以云端部署，比常用的IDE拥有更多的灵活性。

关于 :ref:`st` MCU构建的 `开源项目 <https://github.com/search?q=STM32>`_ 有32000多个(和G0系列相关较少)，其中最主要的类别是arduino，STM32也是arduino的最佳运行平台之一。

* `Arduino_Core_STM32 <https://github.com/stm32duino/Arduino_Core_STM32>`_
* `STM32CubeG0 <https://github.com/STMicroelectronics/STM32CubeG0>`_
* `stm32-rs <https://github.com/stm32-rs/stm32g0xx-hal>`_


Xin总结
--------------

.. contents::
    :local:

能力构建
~~~~~~~~~~~~~

要点提示
~~~~~~~~~~~~~

STM32G0系列属于较新的产品，也重点优化了ADC的性能，相较于使用最广泛的STM32F1系列，在ADC初始化阶段需要更长的时间，所以在采样的时候需要过滤开始阶段无效的数据。

问题整理
~~~~~~~~~~~~~

相较以往STM32的boot模式，新的G0系列芯片出厂默认从system flash启动，boot0管脚无论拉高或拉低都不能从系统存储区（system flash）启动（进入bootloader状态），也就是说如果烧录的程序没有配置SYS调试端口，将无法通过传统的boot0拉高来连接烧录器。

如果要使能boot 0的功能，需要修改option bytes，将nboot_sel后面的勾选去掉，断电复位，此时芯片的启动方式就由boot0引脚决定了，上拉boot0进bootloader模式。

一不小心就把芯片锁死弄成砖了，可以将PA0（NRST）接地，然后在连接STM32CubeProgrammer前断开接地，这是MCU可以被识别到，然后进行擦除或修改option bytes


