
.. _stm32f103:

STM32F103
===============

* 关键词：``72MHz``
* 资源库：`GitHub <https://github.com/SoCXin/STM32F103>`_

.. contents::
    :local:

Xin简介
-----------

 :ref:`st_cortex_m3`

关键特性
~~~~~~~~~~~~~~

* 5个超快速12位ADC（4 Msamples/s）
* 7个12位DAC（15 Msamples/s）
* 7个超快速比较器（17ns）
* 6个具有可编程增益的运算放大器
* 最多3个CAN-FD
* USB Type-C接口以及物理层（PHY）
* USB 2.0 FS
* AES-256硬件

Xin对比
-----------


竞品分析
~~~~~~~~~



型号对比
~~~~~~~~~



Xin实践
-----------


开发工具
~~~~~~~~~~~

使用STM32芯片最直接方式是通过 `stm32cube <https://www.st.com/zh/ecosystems/stm32cube.html>`_ 工具构建基本运行体，不用开发者自己去研究寄存器初始化相应外设（但请注意使能）。

源圈OS-Q通过先验证的方式，集成了更多可信赖资源 `PlatformIO STM32G4 Enhanced <https://github.com/OS-Q/P211>`_ 可以作为一个启动模板，作为一个开源编译体系便于多系统下开发。


示例代码
~~~~~~~~~~~

1. 基于STM32CubeMX生成HAL库工程

.. code-block:: bash

    uint8_t RxData;     //中断接收串口1数据
    void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
    {
        if(&huart1 == huart) {
            HAL_UART_Receive_IT(huart, &RxData, 1);
        }
    }

    void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
        if(htim==(&htim17)) //定时器中断函数
        {
            g_run_tick++;
        }
    }

    int main(void)
    {
        /* USER CODE BEGIN 2 */
        HAL_UART_Receive_IT(&huart1, &RxData, 1);   //中断接收使能
        HAL_TIM_PWM_Start(&htim16,TIM_CHANNEL_1);   //PWM输出使能
        HAL_TIM_Base_Start_IT(&htim17);             //定时器使能
        /* USER CODE END 2 */
        while (1)
        {
            /* USER CODE BEGIN 3 */
            HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
            HAL_Delay(500);
        }
        /* USER CODE END 3 */
    }




.. warning::
     :ref:`stm32f103` 太过火爆，主要考虑市场因素

Xin总结
--------------

.. contents::
    :local:

要点提示
~~~~~~~~~~~~~



问题整理
~~~~~~~~~~~~~


